plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "dev.flutter.flutter-gradle-plugin"
}

ext {
    ext.kotlin_version = '2.0.20'
}

// Function to get specific env variables
def getEnvVariable(String key, String defaultValue = null) {
    // get dart define vars
    if (project.hasProperty('dart-defines')) {
        def dartDefines = project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }

        if (dartDefines.containsKey(key)) { return dartDefines[key] }
    }

    // get env vars
    def foundLine = file("../../.env").readLines().find { line ->
        if (!line.isEmpty() && !line.startsWith("#")) {
            def pos = line.indexOf("=")
            if (pos > 0) {
                def envKey = line.substring(0, pos)
                if (envKey == key) { return line }
            }
        }
        return null
    }

    if (foundLine != null) {
        def pos = foundLine.indexOf("=")
        return foundLine.substring(pos + 1)
    }

    // return default
    return defaultValue
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def debugKeystoreProperties = new Properties()
def debugKeystorePropertiesFile = rootProject.file('debug.properties')
if (debugKeystorePropertiesFile.exists()) {
    debugKeystoreProperties.load(new FileInputStream(debugKeystorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def bundleIdDev = "com.example.dev"
def bundleIdProd = "com.example.prod"

android {
    namespace "com.example.dev"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    kotlin {
        jvmToolchain(17)
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 29
        multiDexEnabled true
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        //? üñäÔ∏è FlutterFire Configuration üñäÔ∏è
        // resValue "string", "storage_bucket", getEnvVariable("FB_STORAGE_BUCKET")
        // resValue "string", "google_app_id", getEnvVariable("FB_APP_ID_ANDROID")
        // resValue "string", "gcm_defaultSenderId", getEnvVariable("FB_MESSAGING_SENDER_ID")
        // resValue "string", "google_api_key", getEnvVariable("FB_API_KEY_ANDROID")
        // resValue "string", "project_id", getEnvVariable("FB_PROJECT_ID")
    }

    flavorDimensions "version"
    productFlavors {
        dev {
            dimension "version"
            manifestPlaceholders = [appLabel: "Flutter detextre4 Test"]
            applicationId bundleIdDev
            namespace bundleIdDev
        }
        prod {
            dimension "version"
            manifestPlaceholders = [appLabel: "Flutter detextre4"]
            applicationId bundleIdProd
            namespace bundleIdProd
        }
    }

    signingConfigs {
        profile {
            keyAlias debugKeystoreProperties['keyAlias']
            keyPassword debugKeystoreProperties['keyPassword']
            storeFile debugKeystoreProperties['storeFile'] ? file(debugKeystoreProperties['storeFile']) : null
            storePassword debugKeystoreProperties['storePassword']
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        // to avoid troubles compiling app with compileSdkVersion 34
        debug {
            minifyEnabled true
            if (debugKeystoreProperties['keyAlias'] != null && debugKeystoreProperties['keyPassword'] != null && debugKeystoreProperties['storeFile'] != null && debugKeystoreProperties['storePassword'] != null) {
                signingConfig signingConfigs.profile
            } else {
                println "Signature configuration not found. Debug keys will be used."
                signingConfig signingConfigs.debug
            }
        }
        profile {
            minifyEnabled true
            if (debugKeystoreProperties['keyAlias'] != null && debugKeystoreProperties['keyPassword'] != null && debugKeystoreProperties['storeFile'] != null && debugKeystoreProperties['storePassword'] != null) {
                signingConfig signingConfigs.profile
            } else {
                println "Signature configuration not found. Debug keys will be used."
                signingConfig signingConfigs.debug
            }
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keystoreProperties['keyAlias'] != null && keystoreProperties['keyPassword'] != null && keystoreProperties['storeFile'] != null && keystoreProperties['storePassword'] != null) {
                signingConfig signingConfigs.release
            } else {
                println "Signature configuration not found. Debug keys will be used."
                signingConfig signingConfigs.debug
            }
        }
    }

    lint {
        checkReleaseBuilds false
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.multidex:multidex:2.0.1'
}
