# Name of the workflow
name: PlayStore Release

# Controls what will trigger the workflow.
# Change it to your needs.
on:
  # A new push to the "main" branch.
  push:
    branches: [ "master" ]
  # Allows to trigger the workflow from GitHub interfaces.
  workflow_dispatch:

# A single workflow can have multiple jobs.
jobs:
  # 'A new job is defined with the name: "build"
  build:
    if: |
      !contains(github.event.head_commit.message, '#stop') &&
      !contains(github.event.head_commit.message, '#deploy-ios') &&
      !contains(github.event.head_commit.message, '#deploy-web')
    # Defines what operating system will be used for the actions.
    # For android, we will use Linux GitHub-Hosted Runner.
    runs-on: ubuntu-24.04
    # Defines what step should be passed for successful run
    steps:
      # Checkout to the selected branch
      - name: Checkout
        uses: actions/checkout@v3
      # Download and install flutter packages
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          # Define which stable flutter version should be used
          flutter-version: "3.27.2"
          channel: 'stable'
          # Enables cache for flutter packages
          # Speed up the process
          cache: true
      # Get Flutter project dependencies
      - name: Get dependencies
        run: |
          sed -i '/- .env/d' pubspec.yaml
          flutter pub get
      # Build Android App Bundle which by default will be stored in the
      # ./build/app/outputs/bundle/release as app-release.aab
      - name: Build release app bundle
        run: |
          flutter build appbundle \
            --flavor prod \
            --dart-define ENVIRONMENT=production \
            --dart-define API_URL=${{ secrets.API_URL }} \
            --dart-define BASE_URL=${{ secrets.BASE_URL }} \
            --dart-define DEEP_LINK_BASE_URL=${{ secrets.DEEP_LINK_BASE_URL }} && \
          mkdir -p build/app/outputs/bundle/release && \
          mv build/app/outputs/bundle/prodRelease/app-prod-release.aab build/app/outputs/bundle/release/app-release.aab
      - name: Sign App Bundle
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: build/app/outputs/bundle/release/
          signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Upload to Play Store (Internal Testing)
        uses: r0adkll/upload-google-play@v1.0.18
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT }}
          packageName: app.apoloPay.apolo
          releaseFiles: ${{steps.sign_app.outputs.signedReleaseFile}}
          mappingFile: ./build/app/outputs/mapping/prodRelease/mapping.txt
          track: internal
